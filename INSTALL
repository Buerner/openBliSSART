openBliSSART installation instructions
======================================


Felix Weninger <weninger@tum.de>
Alexander Lehmann <lehmanna@in.tum.de>


These instructions cover the compilation and installation of openBliSSART on
various platforms. 
For compilation under Unix-like systems, we provide a configure script (GNU
autotools). 
For Microsoft Windows, we prepared Visual Studio 2008 solution files.
See Section 2 for compilation instructions.
Prior to compiling openBliSSART, make sure you have the required libraries
installed (Section 1).
Section 3 covers the integration of Matlab BLAS libraries for enhanced
performance (optional, and experimental).


1. Install the required libraries

openBliSSART requires several open source libraries to run. These include:
- FFTW3 (Fastest Fourier Transform in the West) 
- SDL (>= 1.2.12) and SDL_sound for audio processing
- Poco (Portable Components) Complete Edition >= 1.3.6 for a general-purpose
  application framework and database access (bundled with SQLite)
- Qt (>= 4.4.3) for the browser GUI
 
Furthermore, for fast operation, installation of the ATLAS libraries is highly
recommended, but is in fact optional. The following section will provide hints
on how to install these libraries on popular Linux distributions (Section 1.1),
as well as Microsoft Windows (Section 1.2). If you want to compile all
libraries from source, check Section 1.3.


1.1 Instructions for specific Linux distributions

1.1.1 Ubuntu
TODO (Alex)

1.1.2 openSUSE (>= 11.1)

The following packages will provide the libraries required to compile and run
openBliSSART, except Poco which you will have to compile from source (see
Section 1.3.1.1):
- fftw3
- fftw3-devel
- libqt4
- libqt4-devel
- libSDL
- libSDL-devel
- libSDL_sound-1_0-1
- libSDL_sound-devel
- libatlas3 
- libatlas3-devel

You might also need the following GNU development tools packages in case you
have not already installed them during installation of the SuSE distribution on
your system:
- make
- autoconf
- automake
- libtool

The following instructions are specific to openSUSE 11.2. For openSUSE 11.1, the
steps might be slightly different.

A special note for users of openSUSE 11.0 32-bit: There have been problems
reported with the libatlas3 version that comes with this distribution, causing
program abort due to an illegal instruction on Pentium 4 systems. In this case
you probably want to compile ATLAS yourself (see 
http://math-atlas.sourceforge.net).

To install the packages, start the software installation component of YaST
(check your SuSE documentation if you are unsure about YaST). Make sure that
"Options / Show -devel packages" is enabled, otherwise you will not be able to
see the development packages required for the building process. 

Furthermore, the ATLAS libraries are not included on the SuSE DVD, hence they
must be obtained from the Web (via "Configuration" / "Search packages on the
web". Alternatively, specify the "Education" repository which can be found
under the URL:

    http://download.opensuse.org/repositories/Education/openSUSE_11.2

by selecting "Configuration / Repositories / Add / Specify URL".

There might be a significant number of dependent packages which are
automatically selected by YaST. They might also include the C++ compiler if it
has not yet been installed.


1.2 Microsoft Windows

As the process of obtaining binaries for Windows is quite tedious, we provide a ZIP compressed archive that contains the required external libraries (binaries, export files, and header files) to build and run openBliSSART:

	http://github.com/openBliSSART/openBliSSART/blob/master/win32/blissart-3rdparty-win32.zip

Unzip this file to a location like "C:\devel". Then proceed with Section 1.2.3
"Setting environment variables" below.

1.2.1 Obtain Windows binaries and header files

Furthermore, binaries and header files for most of the required libraries can
be obtained from their project homepages:
- FFTW: http://www.fftw.org/install/windows.html
- SDL: http://www.libsdl.org/download-1.2.php
- SDL_sound: http://icculus.org/SDL_sound/downloads/sdl_sound_visualc_srcs.zip
- ATLAS: http://www.netlib.org/atlas/archives/windows/ - select the version
  that is most appropriate for your processor architecture. These versions are
  old, but still work very well on any modern computer and OS.
- Qt: http://qt.nokia.com/downloads
TODO: How to make lib files from ATLAS?

Note that precompiled Windows binaries for ATLAS and SDL are currently only
available in 32-bit. The Poco project currently does _not_ provide binaries for
Windows, but Poco can be compiled very easily with Visual Studio (see Section
1.3.1.2).

1.2.2. Create directories for binaries and header files

To facilitate configuration of the Visual Studio environment, it is recommended
to create directories for the DLLs (*.dll), export files (*.lib), and header
files (*.h) provided by these libraries, e.g.
- C:\devel\bin for DLL files (*.dll),
- C:\devel\lib for export files (*.lib), and
- C:\devel\include for header files (*.h).  

For FFTW, you have to create the *.lib files yourself. To this end, start the
Visual Studio command line from the "Visual Studio Tools" folder in the Start
menu, change to the directory where you extracted the FFTW ZIP file and issue
the following command: 

	lib /def:libfftw3-3.def

Then, a file named "libbfftw3-3.lib" should be created which you should place
in "C:\devel\lib" (or whatever you called this directory).

Now copy the binaries and header from FFTW, SDL, SDL_sound (located in the
visualc\win32bin and visualc\win32lib) and ATLAS to directories listed above.
The SDL include files should all be placed in a directory "SDL" under the main
include directory, e.g. "C:\devel\include\SDL".

1.2.3 Setting environment variables

Finally, you have to set some environment variables (assuming the above paths): 
- add C:\devel\bin to the PATH variable
- add C:\devel\lib to the "Library directories" in Visual Studio ("Tools" / 
  "Options" / "Projects and Solutions" / "VC++ Directories")
- add C:\devel\include to the "Include directories" in Visual Studio ("Tools" / 
  "Options" / "Projects and Solutions" / "VC++ Directories")
TODO: check English names for VS


1.3 Compiling libraries from source

Obtain the following source packages:
- FFTW3 from http://www.fftw.org
- SDL from http://www.libsdl.org
- SDL_sound from http://icculus.org/SDL_sound/
- Qt from http://qt.nokia.com/downloads
- ATLAS from http://math-atlas.sourceforge.net/
- Poco from http://www.pocoproject.org/download

It is out of the scope of these installation instructions to provide detailed
information about the configuration and compilation of all these packages,
hence we restrict to some hints which might be useful for compiling Poco, as
this library is currently not included e.g. in openSUSE.

1.3.1 Compiling and Installing Poco
 
1.3.1.1 Unix/Linux

After extracting the Poco (Complete Edition) source archive, the configure script should be called
with the following parameters:
 
    ./configure --omit=Crypto,NetSSL_OpenSSL,Data/ODBC,Data/MySQL \
                --no-tests --no-samples

This line avoids building the parts of Poco which are dependent on third-party
libraries, and are not required for openBliSSART.

Then, type "make" to compile and "make install" to install. If you are not
logged in as root, try "sudo make install".

1.3.1.2 Microsoft Windows

After extracting the Poco Complete Edition from the ZIP file, open the file
"components". To avoid building the parts of Poco which are dependent on
third-party libraries, and are not required for openBliSSART, remove all lines but the following:

CppUnit
Foundation
XML
Util
Data
Data/SQLite

Start the Visual Studio command line from the "Visual Studio Tools" folder in
the Start menu. Change to the directory where the "components" file is located,
and type "build_vs71" (Visual Studio .Net 2003), "build_vs80" (Visual Studio
2005) or "build_vs90" (Visual Studio 2008). 

After the build process has finished, copy the files from the "bin"
directory to a directory that is part of your PATH environment variable, and
the lib files from the "lib" directory to a directory which is listed in your
Visual Studio Library Directories.

Unfortunately, under Windows you have to install the Poco include files
yourself. To this end, copy the "Poco" directory within the "include"
subdirectories of each of the "Foundation", "Data", "Data\SQLite", and "Util"
directories to a common path such as "C:\devel\include". Check that this 
directory has the following subdirectories:

C:\devel\include\Poco
C:\devel\include\Poco\Data
C:\devel\include\Poco\DataSQLite
C:\devel\include\Poco\Util

Then, add "C:\devel\include" (or whatever directory you choose) to your Visual
Studio Include directories, in case it is not already there.



2. Configure, compile, and install openBliSSART

2.1 Unix/Linux
(TODO Alex)
Keywords: 
- existence of ATLAS determined automatically
- set prefix (need write access for storage/db!), so maybe $HOME if not root
- Poco, QT prefixes can be given
- CFLAGS and LDFLAGS can be set
- set linker path (/etc/ld.so.conf) after installation

2.2 Microsoft Windows (Visual Studio 2008)

Ensure you have set the paths to external libraries in the Visual Studio
environment correctly (see Section 1.2). To compile openBliSSART using Visual
Studio 2008, simply open the provided solution file ("openBliSSART.sln") and click "Make" / "Make solution". 
If you do not have the ATLAS library installed on your system, please remove
the "HAVE_CBLAS_H" preprocessor definition from the LibLinAlg project file
(right-click the LibLinAlg project in the solution tree, click on "C/C++ /
Preprocessor", then change the line of definitions from
"BUILD_LIBLINALG;HAVE_CBLAS_H" to "BUILD_LIBLINALG" only). However performance
will be very slow if you do this.

After compiling, openBliSSART libraries and tools will be available in the "bin\release" subdirectory.



3. Integrate Matlab libraries (experimental!)

For increased performance, Matlab BLAS libraries can be used for linear algebra
operations. However, since Matlab versions differ significantly in their API, 
this support is currently experimental. In case of problems, please use the
ATLAS libraries.

A major problem with Matlab is that it provides own versions of the FFTW and Qt
libraries which may be incompatible with the ones that openBliSSART was linked
against. In that case, it is recommended to copy the files from the Matlab
libraries directory (like <Matlab dir>/bin/<architecture>) to a separate
directory (say "/lib/matlab" or "C:\matlab-lib") and remove the Qt and FFTW
files (Windows: Qt*.dll and libfftw*.dll, Unix: libQt*.so, libfftw*.so) from
that directory. Make sure the linker can find the files in this by adjusting
the %PATH% (Windows) or $LD_LIBRARY_PATH (Linux) environment varibles. 


3.1 Unix

You need to pass the following parameters to the configure script:

--with-matlab --with-matlab-lib=<dir> --with-matlab-include=<dir>

--with-matlab tells the configure script to compile with Matlab support.
It will try to guess the Matlab integer type (varying from version to version).
In case of compile errors, check the MATLAB_INT_TYPE definition in the
"config.h" file against your Matlab BLAS include file (typically XXX:
<Matlab-dir>/extern/include/blas.h).

--with-matlab-lib points to the directory where the Matlab libraries reside
(usually <Matlab-dir>/bin/<arch>, but see the comment on conflicting libraries
above!). 

--with-matlab-include points to the directory where the Matlab include files
reside (usually <Matlab-dir>/extern/include).


3.2 Microsoft Windows

Make sure that the directory where your Matlab libraries reside (usually
<Matlab dir>\bin\win32) is in your %PATH%, the directory where Matlab export
files are located (typically <Matlab dir>\extern\lib\win32\microsoft) is listed
in your Visual Studio library paths, and the directory where the Matlab
includes are located (usually <Matlab dir>\extern\include) is listed in your
Visual Studio include paths.

Next, identify the correct integer type for the Matlab API. For example, this 
is ptrdiff_t for Matlab R2009b, and int for Matlab R2008. The correct type 
can be found in the Matlab BLAS header file 
(<Matlab dir>\extern\include\blas.h) by looking at the function definitions,
e.g. the type of the "m" parameter to the "dgemm" function. 

Add the "HAVE_MATLAB", and possibly remove the "HAVE_CBLAS_H" preprocessor
definition from the LibLinAlg project file (right-click the LibLinAlg project
in the solution tree, click on "C/C++ / Preprocessor", then change the line of
definitions to "BUILD_LIBLINALG;HAVE_MATLAB". This preprocessor definition will
also cause the required libraries to be linked in. 

If your integer type is _NOT_ ptrdiff_t, add a definition of the form
"MATLAB_INT_TYPE=<type>" to the definition list, so that it looks like

	BUILD_LIBLINALG;HAVE_MATLAB;MATLAB_INT_TYPE=int

