openBliSSART installation instructions
======================================


Felix Weninger <weninger@tum.de>
Alexander Lehmann <lehmanna@in.tum.de>


These instructions cover the compilation and installation of openBliSSART on various platforms. For compilation under Unix-like systems, we provide a configure script (GNU autotools). For Microsoft Windows, we prepared Visual Studio 2008 solution files.


1. Install the required libraries

openBliSSART requires several open source libraries to run. These include:
- FFTW3 (Fastest Fourier Transform in the West) 
- SDL (>= 1.2.12) and SDL_sound for audio processing
- Poco (Portable Components) >= 1.3.6 for a general-purpose application framework and database access (bundled with SQLite)
- Qt (>= 4.4.3) for the browser GUI
 
Furthermore, for fast operation, installation of the ATLAS libraries is highly recommended, but is in fact optional. The following section will provide hints on how to install these libraries on popular Linux distributions (Section 1.1), as well as Microsoft Windows (Section 1.2). If you want to compile all libraries from source, check Section 1.3.


1.1 Instructions for specific Linux distributions

1.1.1 Ubuntu
TODO (Alex)

1.1.2 openSUSE (>= 11.1)

The following packages will provide the libraries required to compile and run openBliSSART, except Poco which you will have to compile from source (see Section 1.3.1.1):
- fftw3
- fftw3-devel
- libqt4
- libqt4-devel
- libSDL
- libSDL-devel
- libSDL_sound-1_0-1
- libSDL_sound-devel
- libatlas3 
- libatlas3-devel

You might also need the following GNU development tools packages in case you have not already installed them during installation of the SuSE distribution on your system:
- make
- autoconf
- automake
- libtool

The following instructions are specific to SuSE Linux 11.2. For SuSE 11.1, the steps might be slightly different.

To install the packages, start the software installation component of YaST (check your SuSE documentation if you are unsure about YaST). Make sure that "Options / Show -devel packages" is enabled, otherwise you will not be able to see the development packages required for the building process. 

Furthermore, the ATLAS libraries are not included on the SuSE DVD, hence they must be obtained from the Web (via "Configuration" / "Search packages on the web". Alternatively, specify the "Education" repository which can be found under the URL:

    http://download.opensuse.org/repositories/Education/openSUSE_11.2

by selecting "Configuration / Repositories / Add / Specify URL".

There might be a significant number of dependent packages which are automatically selected by YaST. They might also include the C++ compiler if it has not yet been installed.


1.2 Microsoft Windows

Binaries and header files for the required libraries can be obtained from their project homepages:
- FFTW: http://www.fftw.org/install/windows.html
- SDL_sound: http://icculus.org/SDL_sound/downloads/sdl_sound_visualc_srcs.zip (this file also includes SDL libraries)
- ATLAS: http://www.netlib.org/atlas/archives/windows/ - select the version appropriate for your processor architecture. These versions are old, but still work reasonably fast on any modern computer.

Note that precompiled Windows binaries for ATLAS and SDL are currently only available in 32-bit. The Poco project currently does _not_ provide binaries for Windows, but Poco can be compiled very easily with Visual Studio (see Section 1.3.1.2).

After downloading (and possibly compiling) the Windows binaries and header files, it is recommended to copy all DLLs (*.dll), DLL export files (*.lib), and header files (*.h) to directories which you can easily locate (e.g. C:\devel\bin, C:\devel\lib and C:\devel\include). Then, you have to set some environment variables (assuming the aforementioned paths): 
- add C:\devel\bin to the PATH variable
- add C:\devel\lib to the "Library directories" in Visual Studio
- add C:\devel\include to the "Include directories" in Visual Studio
TODO: more precise
TODO: check English names for VS


1.3 Compiling libraries from source

Obtain the following source packages:
- FFTW3 from http://www.fftw.org
- SDL from http://www.libsdl.org
- SDL_sound from http://icculus.org/SDL_sound/
- Qt from http://qt.nokia.com/downloads
- ATLAS from http://math-atlas.sourceforge.net/
- Poco from http://www.pocoproject.org/download

It is out of the scope of these installation instructions to provide detailed information about the configuration and compilation of all these packages, hence we restrict to some hints which might be useful for compiling Poco, as this library is currently not included e.g. in openSUSE.

1.3.1 Compiling and Installing Poco
 
1.3.1.1 Unix/Linux
After extracting the Poco source archive, the configure script should be called with the following parameters:
 
    ./configure --omit=Crypto,NetSSL_OpenSSL,Data/ODBC,Data/MySQL \
                --no-tests --no-samples

This line avoids building the parts of Poco which would cause more dependencies to external libraries, and are not required for openBliSSART.

Then, type "make" to compile and "make install" to install. If you are not logged in as root, try "sudo make install".

1.3.1.2 Microsoft Windows (TODO)

TODO: SDL instructions???


2. Configure, compile, and install openBliSSART

2.1 Unix/Linux
(TODO Alex)
Keywords: 
- existence of ATLAS determined automatically
- set prefix (need write access for storage/db!), so maybe $HOME if not root
- Poco, QT prefixes can be given
- CFLAGS and LDFLAGS can be set
- set linker path (/etc/ld.so.conf) after installation

2.2 Microsoft Windows (Visual Studio 2008)

Ensure you have set the paths to external libraries in the Visual Studio environment correctly (see Section 1.2). To compile openBliSSART using Visual Studio 2008, simply open the provided solution file. If you do not have the ATLAS library installed on your system, please remove the "HAVE_CBLAS_H" preprocessor definition from the LibLinAlg project file (right-click the LibLinAlg project in the solution tree, click on "C/C++ / Preprocessor", then change the line of definitions from "BUILD_LIBLINALG;HAVE_CBLAS_H" to "BUILD_LIBLINALG" only).

TODO: check and update!


3. Integrate Matlab libraries (experimental!)

For increased performance, Matlab BLAS libraries can be used for linear algebra operations.

Windows:
(TODO Felix)
Keywords: set HAVE_MATLAB define; set linker flags in LibLinAlg; set integer type

Unix:
(TODO Felix)
Keywords: copy libraries to directory (attention: Qt and FFTW3!); pass configure parameters --with-matlab, --with-matlab-lib and --with-matlab-include; set integer type if needed